#name "AFC Champions League Elite, AFC Champions League Two, AFC Challenge League"
#author "FM 2025 Team"
#version "25.0"

#define M_ACL_PO 17
#define M_ACL_LG1 73
#define M_ACL_LG2 87
#define M_ACL_LG3 108
#define M_ACL_LG4 122
#define M_ACL_LG5 143
#define M_ACL_LG6 157
#define M_ACL_LG7 198
#define M_ACL_LG8 205
#define M_ACL_L [227,234]
#define M_ACL_Q [241,248]
#define M_ACL_S [276,283]
#define M_ACL_F 304
#define M_A2_PO 31
#define M_A2_G [74,88,109,123,144,158]
#define M_A2_L [228,235]
#define M_A2_Q [242,249]
#define M_A2_S [277,284]
#define M_A2_F 305
#define M_ACH_PRE 45
#define M_ACH_G [88,109,123]
#define M_ACH_Q [242,249]
#define M_ACH_S [277,284]
#define M_ACH_F 305
#define SUBS 5

comp Asia.ChampionsLeague {

// 26 teams + 4 slots for AFC CL Elite and AFC CL Two winners (2 slots for West/East region)
pool @ACL_participants teams 30 {
    
    // Associations 1-4 delegate a cup winner in this competition
    
    // West - 15 slots (13 teams + 2 empty slots)
    // Teams will play in Group stage
    getEuropeanAssessmentTeams([1-3], 1, 2) //  6 teams
    getEuropeanAssessmentTeams(4, 1, 1) // 1 team
    // Teams potentially may play in Play-Off (if losers count from ACL PO is not 4)
    reserveAssessmentTeams(1, 1) // 1 team
    getEuropeanAssessmentCupwinner(1)
    fillAssessmentReserves()
    getEuropeanAssessmentTeams([5-6], 1, 1) // 2 teams
    // Teams will play in Play-Off
    reserveAssessmentTeams([2-4], 1) // 3 teams
    getEuropeanAssessmentCupwinner([2-4])
    fillAssessmentReserves()
    // East (Association ID 100+ is used to indicate East region) - 15 slots (13 teams + 2 empty slots)
    // Teams will play in Group stage
    getEuropeanAssessmentTeams([101-103], 1, 2) //  6 teams
    getEuropeanAssessmentTeams(104, 1, 1) // 1 team
    // Teams potentially may play in Play-Off (if losers count from ACL PO is not 4)
    reserveAssessmentTeams(101, 1) // 1 team
    getEuropeanAssessmentCupwinner(101)
    fillAssessmentReserves()
    getEuropeanAssessmentTeams([105-106], 1, 1) // 2 teams
    // Teams will play in Play-Off
    reserveAssessmentTeams([102-104], 1) // 3 teams
    getEuropeanAssessmentCupwinner([102-104])
    fillAssessmentReserves()
    // add winners of AFC CL Elite and AFC CL Two, 3 teams per country limit
    getCCSpare()
    
    round @ACL_PO_W "$ID_PLAYOFF_ROUND_WEST" type PreRound1 teams 6 matchdays M_ACL_PO subs SUBS bonus [0,0,0,0] -> @ACL_league_pool_W {
        get(@ACL_participants, 10, 6)
    }
    
    round @ACL_PO_E "$ID_PLAYOFF_ROUND_EAST" type PreRound1 teams 6 matchdays M_ACL_PO subs SUBS bonus [0,0,0,0] -> @ACL_league_pool_E {
        get(@ACL_participants, 25, 6)
    }
}

pool @ACL_league_pool_W teams 12 {
    get(@ACL_participants, 1, 9)
    getWinner(@ACL_PO_W)
    getCCSpare()
    
    pool @ACL_league_matches_W teams 96 {
        getCCSpare() // generate 8 matchdays
        
        round @ACL_lg1_W "$ID_LEAGUE_PHASE_WEST_MATCH_1" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG1 bonus [767000,0,0,0] subs SUBS { get(@prev, 1, 12); }
        round @ACL_lg2_W "$ID_LEAGUE_PHASE_WEST_MATCH_2" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG2 bonus [0,0,0,0] subs SUBS { get(@prev, 13, 12); }
        round @ACL_lg3_W "$ID_LEAGUE_PHASE_WEST_MATCH_3" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG3 bonus [0,0,0,0] subs SUBS { get(@prev, 25, 12); }
        round @ACL_lg4_W "$ID_LEAGUE_PHASE_WEST_MATCH_4" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG4 bonus [0,0,0,0] subs SUBS { get(@prev, 37, 12); }
        round @ACL_lg5_W "$ID_LEAGUE_PHASE_WEST_MATCH_5" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG5 bonus [0,0,0,0] subs SUBS { get(@prev, 49, 12); }
        round @ACL_lg6_W "$ID_LEAGUE_PHASE_WEST_MATCH_6" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG6 bonus [0,0,0,0] subs SUBS { get(@prev, 61, 12); }
        round @ACL_lg7_W "$ID_LEAGUE_PHASE_WEST_MATCH_7" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG7 bonus [0,0,0,0] subs SUBS { get(@prev, 73, 12); }
        round @ACL_lg8_W "$ID_LEAGUE_PHASE_WEST_MATCH_8" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG8 bonus [0,0,0,0] subs SUBS { get(@prev, 85, 12); }
    }
}

pool @ACL_league_pool_E teams 12 {
    get(@ACL_participants, 16, 9)
    getWinner(@ACL_PO_E)
    getCCSpare()
    
    pool @ACL_league_matches_E teams 96 {
        getCCSpare() // generate 8 matchdays
        
        round @ACL_lg1_E "$ID_LEAGUE_PHASE_EAST_MATCH_1" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG1 bonus [767000,0,0,0] subs SUBS { get(@prev, 1, 12); }
        round @ACL_lg2_E "$ID_LEAGUE_PHASE_EAST_MATCH_2" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG2 bonus [0,0,0,0] subs SUBS { get(@prev, 13, 12); }
        round @ACL_lg3_E "$ID_LEAGUE_PHASE_EAST_MATCH_3" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG3 bonus [0,0,0,0] subs SUBS { get(@prev, 25, 12); }
        round @ACL_lg4_E "$ID_LEAGUE_PHASE_EAST_MATCH_4" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG4 bonus [0,0,0,0] subs SUBS { get(@prev, 37, 12); }
        round @ACL_lg5_E "$ID_LEAGUE_PHASE_EAST_MATCH_5" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG5 bonus [0,0,0,0] subs SUBS { get(@prev, 49, 12); }
        round @ACL_lg6_E "$ID_LEAGUE_PHASE_EAST_MATCH_6" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG6 bonus [0,0,0,0] subs SUBS { get(@prev, 61, 12); }
        round @ACL_lg7_E "$ID_LEAGUE_PHASE_EAST_MATCH_7" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG7 bonus [0,0,0,0] subs SUBS { get(@prev, 73, 12); }
        round @ACL_lg8_E "$ID_LEAGUE_PHASE_EAST_MATCH_8" type Round1 teams 12 no_flags without_away_goal matchdays M_ACL_LG8 bonus [0,0,0,0] subs SUBS { get(@prev, 85, 12); }
    }
}

pool @ACL_league_sorted_pool_W teams 12 <- [@ACL_lg1_W,@ACL_lg2_W,@ACL_lg3_W,@ACL_lg4_W,@ACL_lg5_W,@ACL_lg6_W,@ACL_lg7_W,@ACL_lg8_W] -> @ACL_last16 {
    get(@ACL_league_pool_W)
    getCCSpare() // sort League table
}

pool @ACL_league_sorted_pool_E teams 12 <- [@ACL_lg1_E,@ACL_lg2_E,@ACL_lg3_E,@ACL_lg4_E,@ACL_lg5_E,@ACL_lg6_E,@ACL_lg7_E,@ACL_lg8_E] -> @ACL_last16 {
    get(@ACL_league_pool_E)
    getCCSpare() // sort League table
}

round @ACL_last16 "$ID_TOURNAMENT_EIGHTFINAL" type Last16 teams 16 two_legs matchdays M_ACL_L subs SUBS bonus [191000,0,0,0] {
    get([@ACL_league_sorted_pool_W,@ACL_league_sorted_pool_E], 8, 1)
    get([@ACL_league_sorted_pool_W,@ACL_league_sorted_pool_E], 7, 1)
    get([@ACL_league_sorted_pool_W,@ACL_league_sorted_pool_E], 6, 1)
    get([@ACL_league_sorted_pool_W,@ACL_league_sorted_pool_E], 5, 1)
    get([@ACL_league_sorted_pool_W,@ACL_league_sorted_pool_E], 1, 1)
    get([@ACL_league_sorted_pool_W,@ACL_league_sorted_pool_E], 2, 1)
    get([@ACL_league_sorted_pool_W,@ACL_league_sorted_pool_E], 3, 1)
    get([@ACL_league_sorted_pool_W,@ACL_league_sorted_pool_E], 4, 1)
    
    round type Quarterfinal teams 8 two_legs matchdays M_ACL_Q subs SUBS bonus [383000,0,0,0] {
        get(@prev)
        
        round type Semifinal teams 4 two_legs matchdays M_ACL_S subs SUBS bonus [575000,0,0,0] {
            get(@prev)
            
            round @ACL_final type Final teams 2 matchdays M_ACL_F subs SUBS bonus [3830000,5750000,0,0] {
                get(@prev)
                shuffleTeams()
            }
        }
    }
}

}

comp Asia.UefaCup {
    
pool @ACLTwo_participants teams 34 constraints @ACL_participants {
    
    // Associations 1-4 delegated cup winner in previous competition
    // Associations 5-10 delegate cup winner in this competition
    
    // West - 16 teams + 1 empty slot
    reserveAssessmentTeams([1-10], 1) // 10 teams
    getEuropeanAssessmentCupwinner([1-6]) // ensure cup winners from associations 1-4 are added
    fillAssessmentReserves()
    reserveAssessmentTeams([7-12], 1) // 6 teams
    getEuropeanAssessmentCupwinner([7-10])
    fillAssessmentReserves()
    // East - 16 teams + 1 empty slot
    reserveAssessmentTeams([101-110], 1) // 10 teams
    getEuropeanAssessmentCupwinner([101-106]) // ensure cup winners from associations 101-104 are added
    fillAssessmentReserves()
    reserveAssessmentTeams([107-112], 1) // 6 teams
    getEuropeanAssessmentCupwinner([107-110])
    fillAssessmentReserves()
    // add winner of AFC Challenge League (if not already added) at position 1. or 18.
    getCCSpare()
    
    pool @ACLTwo_W teams 20 <- @ACL_PO_W {
        getLoser(@ACL_PO_W) // 1-3 teams
        get(@ACLTwo_participants, 1, 17) // 16 or 17 teams
    }
    
    pool @ACLTwo_E teams 20 <- @ACL_PO_E {
        getLoser(@ACL_PO_E) // 1-3 teams
        get(@ACLTwo_participants, 18, 17) // 16 or 17 teams
    }
}

round @ACLTwo_PO_W "$ID_PLAYOFF_ROUND_WEST" type PreRound1 teams 8 matchdays M_A2_PO subs SUBS bonus [0,0,0,0] <- @ACLTwo_W {
    get(@ACLTwo_W, 13, 8)
}

round @ACLTwo_PO_E "$ID_PLAYOFF_ROUND_EAST" type PreRound1 teams 8 matchdays M_A2_PO subs SUBS bonus [0,0,0,0] <- @ACLTwo_E {
    get(@ACLTwo_E, 13, 8)
}

pool @ACLTwo_groups_W teams 16 sorting ChampionsCupGroup <- @ACLTwo_PO_W -> [@ACLTwo_a,@ACLTwo_b,@ACLTwo_c,@ACLTwo_d,@ACLTwo_e,@ACLTwo_f,@ACLTwo_g,@ACLTwo_h] {
    get(@ACLTwo_W, 1, 12) // 12 teams
    getWinner(@ACLTwo_PO_W) // 4 teams
}
    
pool @ACLTwo_groups_E teams 16 sorting ChampionsCupGroup <- @ACLTwo_PO_E -> [@ACLTwo_a,@ACLTwo_b,@ACLTwo_c,@ACLTwo_d,@ACLTwo_e,@ACLTwo_f,@ACLTwo_g,@ACLTwo_h] {
    get(@ACLTwo_E, 1, 12) // 12 teams
    getWinner(@ACLTwo_PO_E) // 4 teams
}

group @ACLTwo_a "A" teams 4 rounds 2 sorting DM matchdays M_A2_G bonus [288000,0,0,0] subs SUBS -> @ACLTwo_last16 { get(@ACLTwo_groups_W, 1, 4) }
group @ACLTwo_b "B" teams 4 rounds 2 sorting DM matchdays M_A2_G bonus [288000,0,0,0] subs SUBS -> @ACLTwo_last16 { get(@ACLTwo_groups_W, 5, 4) }
group @ACLTwo_c "C" teams 4 rounds 2 sorting DM matchdays M_A2_G bonus [288000,0,0,0] subs SUBS -> @ACLTwo_last16 { get(@ACLTwo_groups_W, 9, 4) }
group @ACLTwo_d "D" teams 4 rounds 2 sorting DM matchdays M_A2_G bonus [288000,0,0,0] subs SUBS -> @ACLTwo_last16 { get(@ACLTwo_groups_W, 13, 4) }
group @ACLTwo_e "E" teams 4 rounds 2 sorting DM matchdays M_A2_G bonus [288000,0,0,0] subs SUBS -> @ACLTwo_last16 { get(@ACLTwo_groups_E, 1, 4) }
group @ACLTwo_f "F" teams 4 rounds 2 sorting DM matchdays M_A2_G bonus [288000,0,0,0] subs SUBS -> @ACLTwo_last16 { get(@ACLTwo_groups_E, 5, 4) }
group @ACLTwo_g "G" teams 4 rounds 2 sorting DM matchdays M_A2_G bonus [288000,0,0,0] subs SUBS -> @ACLTwo_last16 { get(@ACLTwo_groups_E, 9, 4) }
group @ACLTwo_h "H" teams 4 rounds 2 sorting DM matchdays M_A2_G bonus [288000,0,0,0] subs SUBS -> @ACLTwo_last16 { get(@ACLTwo_groups_E, 13, 4) }

round @ACLTwo_last16 "$ID_TOURNAMENT_EIGHTFINAL" type Last16 teams 16 two_legs matchdays M_A2_L subs SUBS bonus [77000,0,0,0] {
    get([@ACLTwo_a,@ACLTwo_e,@ACLTwo_c,@ACLTwo_g,@ACLTwo_b,@ACLTwo_f,@ACLTwo_d,@ACLTwo_h], 1, 1)
    get([@ACLTwo_b,@ACLTwo_f,@ACLTwo_d,@ACLTwo_h,@ACLTwo_a,@ACLTwo_e,@ACLTwo_c,@ACLTwo_g], 2, 1)
    
    round type Quarterfinal teams 8 two_legs matchdays M_A2_Q subs SUBS bonus [153000,0,0,0] {
        get(@prev)
        
        round type Semifinal teams 4 two_legs matchdays M_A2_S subs SUBS bonus [230000,0,0,0] {
            get(@prev)
            
            round @ACLTwo_final type Final teams 2 matchdays M_A2_F subs SUBS bonus [960000,1450000,0,0] {
                get(@prev)
                shuffleTeams()
            }
        }
    }
}

}

comp Asia.ConferenceLeague {

pool @AChallenge_participants teams 25 constraints [@ACL_participants,@ACLTwo_participants] {
    
    // Associations 11-12 delegate cup winner in this competition
    
    // West - 15 teams
    reserveAssessmentTeams([11-25], 1) // 15 teams
    getEuropeanAssessmentCupwinner([11-12])
    fillAssessmentReserves()
    // East - 10 teams
    reserveAssessmentTeams([111-120], 1) // 10 teams
    getEuropeanAssessmentCupwinner([111-112])
    fillAssessmentReserves()
    
    pool @AChallenge_W teams 19 <- @ACLTwo_PO_W {
        getLoser(@ACLTwo_PO_W) // 1-4 teams
        get(@AChallenge_participants, 1, 15) // 15 teams
    }
    
    pool @AChallenge_E teams 14 <- @ACLTwo_PO_E {
        getLoser(@ACLTwo_PO_E) // 1-4 teams
        get(@AChallenge_participants, 16, 10) // 10 teams
    }
}

round @AChallenge_prelim_W "$ID_PRELIM_ROUND_WEST" type PreRound1 teams 14 matchdays M_ACH_PRE subs SUBS <- @AChallenge_W {
    get(@AChallenge_W, 6, 14)
    getCCSpare()
}

round @AChallenge_prelim_E "$ID_PRELIM_ROUND_EAST" type PreRound1 teams 12 matchdays M_ACH_PRE subs SUBS <- @AChallenge_E {
    get(@AChallenge_E, 3, 12)
    getCCSpare()
}

// West - 12 teams, 3 groups
pool @AChallenge_groups_W teams 12 sorting ChampionsCupGroup <- @AChallenge_prelim_W {
    get(@AChallenge_W, 1, 5)
    get(@AChallenge_prelim_W)
}

// East - 8 teams, 2 groups
pool @AChallenge_groups_E teams 8 sorting ChampionsCupGroup <- @AChallenge_prelim_E {
    get(@AChallenge_E, 1, 2)
    get(@AChallenge_prelim_E)
}

group @AChallenge_a "A" teams 4 sorting DM matchdays M_ACH_G bonus [96000,0,0,0] subs SUBS <- [@AChallenge_groups_W,@AChallenge_groups_E] { get(@AChallenge_groups_W, 1, 4) }
group @AChallenge_b "B" teams 4 sorting DM matchdays M_ACH_G bonus [96000,0,0,0] subs SUBS <- [@AChallenge_groups_W,@AChallenge_groups_E] { get(@AChallenge_groups_W, 5, 4) }
group @AChallenge_c "C" teams 4 sorting DM matchdays M_ACH_G bonus [96000,0,0,0] subs SUBS <- [@AChallenge_groups_W,@AChallenge_groups_E] { get(@AChallenge_groups_W, 9, 4) }
group @AChallenge_d "D" teams 4 sorting DM matchdays M_ACH_G bonus [96000,0,0,0] subs SUBS <- [@AChallenge_groups_W,@AChallenge_groups_E] { get(@AChallenge_groups_E, 1, 4) }
group @AChallenge_e "E" teams 4 sorting DM matchdays M_ACH_G bonus [96000,0,0,0] subs SUBS <- [@AChallenge_groups_W,@AChallenge_groups_E] { get(@AChallenge_groups_E, 5, 4) }

pool @AChallenge_runnerUps_W teams 3 sorting PRevPointsDiff <- [@AChallenge_a,@AChallenge_b,@AChallenge_c,@AChallenge_d,@AChallenge_e] {
    get([@AChallenge_a,@AChallenge_b,@AChallenge_c], 2, 1)
    
    pool @AChallenge_KO_W teams 4 sorting Random {
        get([@AChallenge_a,@AChallenge_b,@AChallenge_c], 1, 1)
        get(@AChallenge_runnerUps_W, 1, 1)
    }
    
    pool @AChallenge_KO_E teams 4 sorting Random {
        get([@AChallenge_d,@AChallenge_e], 1, 2)
    }
}

round type Quarterfinal teams 8 two_legs matchdays M_ACH_Q subs SUBS bonus [77000,0,0,0] <- [@AChallenge_KO_W,@AChallenge_KO_E] {
    get([@AChallenge_KO_W,@AChallenge_KO_E], 1, 1)
    get([@AChallenge_KO_W,@AChallenge_KO_E], 2, 1)
    get([@AChallenge_KO_W,@AChallenge_KO_E], 3, 1)
    get([@AChallenge_KO_W,@AChallenge_KO_E], 4, 1)
    
    round type Semifinal teams 4 two_legs matchdays M_ACH_S subs SUBS bonus [115000,0,0,0] {
        get(@prev)
        
        round @AChallenge_final type Final teams 2 matchdays M_ACH_F subs SUBS bonus [480000,480000,0,0] {
            get(@prev)
        }
    }
}

}